{
  "stats": {
    "suites": 8,
    "tests": 18,
    "passes": 18,
    "pending": 0,
    "failures": 0,
    "start": "2017-09-24T09:37:18.169Z",
    "end": "2017-09-24T09:37:18.464Z",
    "duration": 295,
    "testsRegistered": 18,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "title": "",
    "suites": [
      {
        "title": "Auth Admin",
        "suites": [
          {
            "title": "[POST] /login Login to the application",
            "suites": [],
            "tests": [
              {
                "title": "200: Logged",
                "fullTitle": "Auth Admin [POST] /login Login to the application 200: Logged",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.post('/login', defAdmin).then(d => {\n        for (key in schemas.auth.Logged) {\n          expect(d.data).to.have.property(key)\n        }\n        done()\n      })",
                "err": {},
                "isRoot": false,
                "uuid": "49d1fc4e-b782-4d18-9649-949dc0767864",
                "parentUUID": "aad1ca44-95c3-4ed1-9bf3-faf550b36f37",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "405: only username",
                "fullTitle": "Auth Admin [POST] /login Login to the application 405: only username",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.post('/login', { username: 'admin' })\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "62654982-06cf-4958-9123-e71ca13d1857",
                "parentUUID": "aad1ca44-95c3-4ed1-9bf3-faf550b36f37",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "405: only password",
                "fullTitle": "Auth Admin [POST] /login Login to the application 405: only password",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.post('/login', { password: 'admin' })\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "d53da658-b849-4053-947a-c0d18e7a810c",
                "parentUUID": "aad1ca44-95c3-4ed1-9bf3-faf550b36f37",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "405: non-existing username",
                "fullTitle": "Auth Admin [POST] /login Login to the application 405: non-existing username",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.post('/login', { username: 'Ofjwdz2q13rczva', password: 'asdf' })\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "0d2f5d9c-0d14-4f00-93df-9a9e7fb05d5d",
                "parentUUID": "aad1ca44-95c3-4ed1-9bf3-faf550b36f37",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/unit/apis/auth.spec.js",
            "uuid": "aad1ca44-95c3-4ed1-9bf3-faf550b36f37",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/usr/local/var/www/arknodejs.com/api/test/unit/apis/auth.spec.js",
            "passes": [
              {
                "title": "200: Logged",
                "fullTitle": "Auth Admin [POST] /login Login to the application 200: Logged",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.post('/login', defAdmin).then(d => {\n        for (key in schemas.auth.Logged) {\n          expect(d.data).to.have.property(key)\n        }\n        done()\n      })",
                "err": {},
                "isRoot": false,
                "uuid": "49d1fc4e-b782-4d18-9649-949dc0767864",
                "parentUUID": "aad1ca44-95c3-4ed1-9bf3-faf550b36f37",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "405: only username",
                "fullTitle": "Auth Admin [POST] /login Login to the application 405: only username",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.post('/login', { username: 'admin' })\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "62654982-06cf-4958-9123-e71ca13d1857",
                "parentUUID": "aad1ca44-95c3-4ed1-9bf3-faf550b36f37",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "405: only password",
                "fullTitle": "Auth Admin [POST] /login Login to the application 405: only password",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.post('/login', { password: 'admin' })\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "d53da658-b849-4053-947a-c0d18e7a810c",
                "parentUUID": "aad1ca44-95c3-4ed1-9bf3-faf550b36f37",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "405: non-existing username",
                "fullTitle": "Auth Admin [POST] /login Login to the application 405: non-existing username",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.post('/login', { username: 'Ofjwdz2q13rczva', password: 'asdf' })\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "0d2f5d9c-0d14-4f00-93df-9a9e7fb05d5d",
                "parentUUID": "aad1ca44-95c3-4ed1-9bf3-faf550b36f37",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 54,
            "rootEmpty": false
          },
          {
            "title": "[GET] /verify Verify the token in header[authorization]",
            "suites": [],
            "tests": [
              {
                "title": "200: Logged",
                "fullTitle": "Auth Admin [GET] /verify Verify the token in header[authorization] 200: Logged",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.post('/login', defAdmin)\n      .then(d => {\n        return customApi({ headers: { 'Authorization': d.data.token } })\n          .get('/verify')\n      }).then(d => {\n        for (key in schemas.auth.Logged) {\n          expect(d.data).to.have.property(key)\n          if (key === 'role') expect(d.data[key]).to.equal('admin')\n        }\n        done()\n      })",
                "err": {},
                "isRoot": false,
                "uuid": "15439007-de43-4af6-9a8e-1f202d3d37b9",
                "parentUUID": "bfdd1b81-dbc9-49c1-8887-e6e0dea31a47",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "401: No header[authorization]",
                "fullTitle": "Auth Admin [GET] /verify Verify the token in header[authorization] 401: No header[authorization]",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.get('/verify')\n        .catch(d => {\n          expect(d.response.status).to.equal(401)\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "fe480fe4-706d-4f6f-b238-dcac2fcb0a67",
                "parentUUID": "bfdd1b81-dbc9-49c1-8887-e6e0dea31a47",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "401: Invalid header[authorization]",
                "fullTitle": "Auth Admin [GET] /verify Verify the token in header[authorization] 401: Invalid header[authorization]",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      customApi({ headers: { 'Authorization': 'asdf' } }).get('/verify')\n        .catch(d => {\n          expect(d.response.status).to.equal(401)\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "eb98a957-d624-4396-8901-00d4bfe0d391",
                "parentUUID": "bfdd1b81-dbc9-49c1-8887-e6e0dea31a47",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/unit/apis/auth.spec.js",
            "uuid": "bfdd1b81-dbc9-49c1-8887-e6e0dea31a47",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/usr/local/var/www/arknodejs.com/api/test/unit/apis/auth.spec.js",
            "passes": [
              {
                "title": "200: Logged",
                "fullTitle": "Auth Admin [GET] /verify Verify the token in header[authorization] 200: Logged",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.post('/login', defAdmin)\n      .then(d => {\n        return customApi({ headers: { 'Authorization': d.data.token } })\n          .get('/verify')\n      }).then(d => {\n        for (key in schemas.auth.Logged) {\n          expect(d.data).to.have.property(key)\n          if (key === 'role') expect(d.data[key]).to.equal('admin')\n        }\n        done()\n      })",
                "err": {},
                "isRoot": false,
                "uuid": "15439007-de43-4af6-9a8e-1f202d3d37b9",
                "parentUUID": "bfdd1b81-dbc9-49c1-8887-e6e0dea31a47",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "401: No header[authorization]",
                "fullTitle": "Auth Admin [GET] /verify Verify the token in header[authorization] 401: No header[authorization]",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.get('/verify')\n        .catch(d => {\n          expect(d.response.status).to.equal(401)\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "fe480fe4-706d-4f6f-b238-dcac2fcb0a67",
                "parentUUID": "bfdd1b81-dbc9-49c1-8887-e6e0dea31a47",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "401: Invalid header[authorization]",
                "fullTitle": "Auth Admin [GET] /verify Verify the token in header[authorization] 401: Invalid header[authorization]",
                "timedOut": false,
                "duration": 4,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      customApi({ headers: { 'Authorization': 'asdf' } }).get('/verify')\n        .catch(d => {\n          expect(d.response.status).to.equal(401)\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "eb98a957-d624-4396-8901-00d4bfe0d391",
                "parentUUID": "bfdd1b81-dbc9-49c1-8887-e6e0dea31a47",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 3,
            "totalPasses": 3,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 25,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/apis/auth.spec.js",
        "uuid": "69ff833a-6e00-414f-a38c-09aa49b23f01",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/usr/local/var/www/arknodejs.com/api/test/unit/apis/auth.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Public User APIs",
        "suites": [
          {
            "title": "[GET] /user?_id|username|email",
            "suites": [],
            "tests": [
              {
                "title": "200: by username",
                "fullTitle": "Public User APIs [GET] /user?_id|username|email 200: by username",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.get('/user?username=editor1')\n        .then(d => {\n          for (key in schemas.user.UserPublic) {\n            expect(d.data).to.have.property(key)\n          }\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "0f210d99-fea8-4d2e-a036-2dbf6ddc15f3",
                "parentUUID": "65ea569f-511d-4993-ad1b-c01175978abf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "204: no matched user",
                "fullTitle": "Public User APIs [GET] /user?_id|username|email 204: no matched user",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.get('/user?username=editor2')\n        .then(d => {\n          expect(d.status).to.equal(204)\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "99555923-e5c7-44e1-be95-39be88160cdd",
                "parentUUID": "65ea569f-511d-4993-ad1b-c01175978abf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "204: admin user is ignored",
                "fullTitle": "Public User APIs [GET] /user?_id|username|email 204: admin user is ignored",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.get('/user?username=admin')\n        .then(d => {\n          expect(d.status).to.equal(204)\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "a05c0c9f-8dde-47b9-ab9d-67894d519d44",
                "parentUUID": "65ea569f-511d-4993-ad1b-c01175978abf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "405: missing query",
                "fullTitle": "Public User APIs [GET] /user?_id|username|email 405: missing query",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.get('/user')\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "d6bdc50c-d701-4d6f-bb01-4a162533c8aa",
                "parentUUID": "65ea569f-511d-4993-ad1b-c01175978abf",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/unit/apis/user.spec.js",
            "uuid": "65ea569f-511d-4993-ad1b-c01175978abf",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/usr/local/var/www/arknodejs.com/api/test/unit/apis/user.spec.js",
            "passes": [
              {
                "title": "200: by username",
                "fullTitle": "Public User APIs [GET] /user?_id|username|email 200: by username",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.get('/user?username=editor1')\n        .then(d => {\n          for (key in schemas.user.UserPublic) {\n            expect(d.data).to.have.property(key)\n          }\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "0f210d99-fea8-4d2e-a036-2dbf6ddc15f3",
                "parentUUID": "65ea569f-511d-4993-ad1b-c01175978abf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "204: no matched user",
                "fullTitle": "Public User APIs [GET] /user?_id|username|email 204: no matched user",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.get('/user?username=editor2')\n        .then(d => {\n          expect(d.status).to.equal(204)\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "99555923-e5c7-44e1-be95-39be88160cdd",
                "parentUUID": "65ea569f-511d-4993-ad1b-c01175978abf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "204: admin user is ignored",
                "fullTitle": "Public User APIs [GET] /user?_id|username|email 204: admin user is ignored",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.get('/user?username=admin')\n        .then(d => {\n          expect(d.status).to.equal(204)\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "a05c0c9f-8dde-47b9-ab9d-67894d519d44",
                "parentUUID": "65ea569f-511d-4993-ad1b-c01175978abf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "405: missing query",
                "fullTitle": "Public User APIs [GET] /user?_id|username|email 405: missing query",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.get('/user')\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "d6bdc50c-d701-4d6f-bb01-4a162533c8aa",
                "parentUUID": "65ea569f-511d-4993-ad1b-c01175978abf",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 4,
            "totalPasses": 4,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 28,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/apis/user.spec.js",
        "uuid": "bb8d59e2-ced4-4ab9-a633-964d44764d0d",
        "beforeHooks": [],
        "afterHooks": [],
        "fullFile": "/usr/local/var/www/arknodejs.com/api/test/unit/apis/user.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": false,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      },
      {
        "title": "Admin User APIs",
        "suites": [
          {
            "title": "[POST] /admin/user [admin only]",
            "suites": [],
            "tests": [
              {
                "title": "201: new User",
                "fullTitle": "Admin User APIs [POST] /admin/user [admin only] 201: new User",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.post('/admin/user', userCreate, { headers })\n        .then(d => {\n          for (key in schemas.user.User) {\n            expect(d.data).to.have.property(key)\n          }\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "87ac9ac6-1e89-48e2-86b6-64ea3ee59e80",
                "parentUUID": "6d9c3695-a22b-473d-a595-0233a1b98f0d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "401: Unauthorized",
                "fullTitle": "Admin User APIs [POST] /admin/user [admin only] 401: Unauthorized",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.post('/admin/user', userCreate)\n        .catch(e => {\n          expect(e.response.status).to.equal(401)\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "65f86b91-fbe2-44df-8dc6-8f07dd11364a",
                "parentUUID": "6d9c3695-a22b-473d-a595-0233a1b98f0d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "405: duplicated username",
                "fullTitle": "Admin User APIs [POST] /admin/user [admin only] 405: duplicated username",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.post('/admin/user', userCreate, { headers })\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "f16ab178-0bd3-402e-b0c7-156b42a90b4f",
                "parentUUID": "6d9c3695-a22b-473d-a595-0233a1b98f0d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "405: empty / missing username",
                "fullTitle": "Admin User APIs [POST] /admin/user [admin only] 405: empty / missing username",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      const _userCreate = Object.assign({}, userCreate, { username: '' })\n      // userCreate.username = undefined\n      // delete userCreate.username\n      api.post('/admin/user', _userCreate, { headers })\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "8e4a64ec-d369-426b-8e2f-75731ade70e5",
                "parentUUID": "6d9c3695-a22b-473d-a595-0233a1b98f0d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "405: empty / missing email",
                "fullTitle": "Admin User APIs [POST] /admin/user [admin only] 405: empty / missing email",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      const _userCreate = Object.assign({}, userCreate, { email: '' })\n      // userCreate.email = undefined\n      // delete userCreate.email\n      api.post('/admin/user', _userCreate, { headers })\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "e2b8f926-86f8-47a7-8639-28d748d8f43e",
                "parentUUID": "6d9c3695-a22b-473d-a595-0233a1b98f0d",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/unit/apis/user.spec.js",
            "uuid": "6d9c3695-a22b-473d-a595-0233a1b98f0d",
            "beforeHooks": [],
            "afterHooks": [
              {
                "title": "\"after all\" hook",
                "fullTitle": "Admin User APIs [POST] /admin/user [admin only] \"after all\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "const params = { username: userCreate.username }\napi.delete('/admin/user', { params, headers })",
                "err": {},
                "isRoot": false,
                "uuid": "7d0a029c-599a-4d72-acd2-d87ab59fc280",
                "parentUUID": "6d9c3695-a22b-473d-a595-0233a1b98f0d",
                "isHook": true,
                "skipped": false
              }
            ],
            "fullFile": "/usr/local/var/www/arknodejs.com/api/test/unit/apis/user.spec.js",
            "passes": [
              {
                "title": "201: new User",
                "fullTitle": "Admin User APIs [POST] /admin/user [admin only] 201: new User",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.post('/admin/user', userCreate, { headers })\n        .then(d => {\n          for (key in schemas.user.User) {\n            expect(d.data).to.have.property(key)\n          }\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "87ac9ac6-1e89-48e2-86b6-64ea3ee59e80",
                "parentUUID": "6d9c3695-a22b-473d-a595-0233a1b98f0d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "401: Unauthorized",
                "fullTitle": "Admin User APIs [POST] /admin/user [admin only] 401: Unauthorized",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.post('/admin/user', userCreate)\n        .catch(e => {\n          expect(e.response.status).to.equal(401)\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "65f86b91-fbe2-44df-8dc6-8f07dd11364a",
                "parentUUID": "6d9c3695-a22b-473d-a595-0233a1b98f0d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "405: duplicated username",
                "fullTitle": "Admin User APIs [POST] /admin/user [admin only] 405: duplicated username",
                "timedOut": false,
                "duration": 10,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      api.post('/admin/user', userCreate, { headers })\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "f16ab178-0bd3-402e-b0c7-156b42a90b4f",
                "parentUUID": "6d9c3695-a22b-473d-a595-0233a1b98f0d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "405: empty / missing username",
                "fullTitle": "Admin User APIs [POST] /admin/user [admin only] 405: empty / missing username",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      const _userCreate = Object.assign({}, userCreate, { username: '' })\n      // userCreate.username = undefined\n      // delete userCreate.username\n      api.post('/admin/user', _userCreate, { headers })\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "8e4a64ec-d369-426b-8e2f-75731ade70e5",
                "parentUUID": "6d9c3695-a22b-473d-a595-0233a1b98f0d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "405: empty / missing email",
                "fullTitle": "Admin User APIs [POST] /admin/user [admin only] 405: empty / missing email",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      const _userCreate = Object.assign({}, userCreate, { email: '' })\n      // userCreate.email = undefined\n      // delete userCreate.email\n      api.post('/admin/user', _userCreate, { headers })\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "e2b8f926-86f8-47a7-8639-28d748d8f43e",
                "parentUUID": "6d9c3695-a22b-473d-a595-0233a1b98f0d",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": true,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 5,
            "totalPasses": 5,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 49,
            "rootEmpty": false
          },
          {
            "title": "[GET] /admin/user [admin only]",
            "suites": [],
            "tests": [
              {
                "title": "200: User",
                "fullTitle": "Admin User APIs [GET] /admin/user [admin only] 200: User",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      const params = { \n        criteria: JSON.stringify({ username: 'admin' }),\n        select: Object.keys(schemas.user.UserFindOne).join(' '))()\n      }\n      api.get('/admin/user', { params, headers })\n        .then(d => {\n          for (key in schemas.user.UserFindOne) {\n            schemas.user.UserFindOne.has && expect(d.data).to.have.property(key)\n          }\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "6baa2de6-58da-4b97-bde7-2da46a6ad760",
                "parentUUID": "3cb307cb-1859-4eee-8bb1-549bfb8ad23d",
                "isHook": false,
                "skipped": false
              }
            ],
            "pending": [],
            "root": false,
            "_timeout": 2000,
            "file": "/test/unit/apis/user.spec.js",
            "uuid": "3cb307cb-1859-4eee-8bb1-549bfb8ad23d",
            "beforeHooks": [],
            "afterHooks": [],
            "fullFile": "/usr/local/var/www/arknodejs.com/api/test/unit/apis/user.spec.js",
            "passes": [
              {
                "title": "200: User",
                "fullTitle": "Admin User APIs [GET] /admin/user [admin only] 200: User",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "done => {\n      const params = { \n        criteria: JSON.stringify({ username: 'admin' }),\n        select: Object.keys(schemas.user.UserFindOne).join(' '))()\n      }\n      api.get('/admin/user', { params, headers })\n        .then(d => {\n          for (key in schemas.user.UserFindOne) {\n            schemas.user.UserFindOne.has && expect(d.data).to.have.property(key)\n          }\n          done()\n        })",
                "err": {},
                "isRoot": false,
                "uuid": "6baa2de6-58da-4b97-bde7-2da46a6ad760",
                "parentUUID": "3cb307cb-1859-4eee-8bb1-549bfb8ad23d",
                "isHook": false,
                "skipped": false
              }
            ],
            "failures": [],
            "skipped": [],
            "hasBeforeHooks": false,
            "hasAfterHooks": false,
            "hasTests": true,
            "hasSuites": false,
            "totalTests": 1,
            "totalPasses": 1,
            "totalFailures": 0,
            "totalPending": 0,
            "totalSkipped": 0,
            "hasPasses": true,
            "hasFailures": false,
            "hasPending": false,
            "hasSkipped": false,
            "duration": 14,
            "rootEmpty": false
          }
        ],
        "tests": [],
        "pending": [],
        "root": false,
        "_timeout": 2000,
        "file": "/test/unit/apis/user.spec.js",
        "uuid": "d88c7600-ed78-47ec-b4c0-45dea8ee33d2",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "Admin User APIs \"before all\" hook",
            "timedOut": false,
            "duration": 7,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "async \n    await api.post('/login', defAdmin).then(d => {\n      headers = { Authorization: d.data.token }\n    })",
            "err": {},
            "isRoot": false,
            "uuid": "96a085ee-b84b-490c-9140-96f898e9c221",
            "parentUUID": "d88c7600-ed78-47ec-b4c0-45dea8ee33d2",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "fullFile": "/usr/local/var/www/arknodejs.com/api/test/unit/apis/user.spec.js",
        "passes": [],
        "failures": [],
        "skipped": [],
        "hasBeforeHooks": true,
        "hasAfterHooks": false,
        "hasTests": false,
        "hasSuites": true,
        "totalTests": 0,
        "totalPasses": 0,
        "totalFailures": 0,
        "totalPending": 0,
        "totalSkipped": 0,
        "hasPasses": false,
        "hasFailures": false,
        "hasPending": false,
        "hasSkipped": false,
        "duration": 0,
        "rootEmpty": false
      }
    ],
    "tests": [
      {
        "title": "Welcome",
        "fullTitle": " Welcome",
        "timedOut": false,
        "duration": 90,
        "state": "passed",
        "speed": "slow",
        "pass": true,
        "fail": false,
        "pending": false,
        "code": "done => {\n  api.get('/').then(d => {\n    expect(d.data).to.have.property('env')\n    expect(d.data).to.have.property('info')\n    expect(d.data).to.have.property('authentication')\n    done()\n  })",
        "err": {},
        "isRoot": true,
        "uuid": "744e8327-e354-474b-abef-119c81e0ebc8",
        "parentUUID": "a0d578e8-626d-42f1-804d-0cc534cb6f4a",
        "isHook": false,
        "skipped": false
      }
    ],
    "pending": [],
    "root": true,
    "_timeout": 2000,
    "uuid": "a0d578e8-626d-42f1-804d-0cc534cb6f4a",
    "beforeHooks": [],
    "afterHooks": [],
    "fullFile": "",
    "file": "",
    "passes": [
      {
        "title": "Welcome",
        "fullTitle": " Welcome",
        "timedOut": false,
        "duration": 90,
        "state": "passed",
        "speed": "slow",
        "pass": true,
        "fail": false,
        "pending": false,
        "code": "done => {\n  api.get('/').then(d => {\n    expect(d.data).to.have.property('env')\n    expect(d.data).to.have.property('info')\n    expect(d.data).to.have.property('authentication')\n    done()\n  })",
        "err": {},
        "isRoot": true,
        "uuid": "744e8327-e354-474b-abef-119c81e0ebc8",
        "parentUUID": "a0d578e8-626d-42f1-804d-0cc534cb6f4a",
        "isHook": false,
        "skipped": false
      }
    ],
    "failures": [],
    "skipped": [],
    "hasBeforeHooks": false,
    "hasAfterHooks": false,
    "hasTests": true,
    "hasSuites": true,
    "totalTests": 1,
    "totalPasses": 1,
    "totalFailures": 0,
    "totalPending": 0,
    "totalSkipped": 0,
    "hasPasses": true,
    "hasFailures": false,
    "hasPending": false,
    "hasSkipped": false,
    "duration": 90,
    "rootEmpty": false
  },
  "allTests": [
    {
      "title": "Welcome",
      "fullTitle": " Welcome",
      "timedOut": false,
      "duration": 90,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n  api.get('/').then(d => {\n    expect(d.data).to.have.property('env')\n    expect(d.data).to.have.property('info')\n    expect(d.data).to.have.property('authentication')\n    done()\n  })",
      "err": {},
      "isRoot": true,
      "uuid": "744e8327-e354-474b-abef-119c81e0ebc8",
      "parentUUID": "a0d578e8-626d-42f1-804d-0cc534cb6f4a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "200: Logged",
      "fullTitle": "[POST] /login Login to the application 200: Logged",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.post('/login', defAdmin).then(d => {\n        for (key in schemas.auth.Logged) {\n          expect(d.data).to.have.property(key)\n        }\n        done()\n      })",
      "err": {},
      "isRoot": false,
      "uuid": "49d1fc4e-b782-4d18-9649-949dc0767864",
      "parentUUID": "aad1ca44-95c3-4ed1-9bf3-faf550b36f37",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "405: only username",
      "fullTitle": "[POST] /login Login to the application 405: only username",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.post('/login', { username: 'admin' })\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "62654982-06cf-4958-9123-e71ca13d1857",
      "parentUUID": "aad1ca44-95c3-4ed1-9bf3-faf550b36f37",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "405: only password",
      "fullTitle": "[POST] /login Login to the application 405: only password",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.post('/login', { password: 'admin' })\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "d53da658-b849-4053-947a-c0d18e7a810c",
      "parentUUID": "aad1ca44-95c3-4ed1-9bf3-faf550b36f37",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "405: non-existing username",
      "fullTitle": "[POST] /login Login to the application 405: non-existing username",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.post('/login', { username: 'Ofjwdz2q13rczva', password: 'asdf' })\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "0d2f5d9c-0d14-4f00-93df-9a9e7fb05d5d",
      "parentUUID": "aad1ca44-95c3-4ed1-9bf3-faf550b36f37",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "200: Logged",
      "fullTitle": "[GET] /verify Verify the token in header[authorization] 200: Logged",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.post('/login', defAdmin)\n      .then(d => {\n        return customApi({ headers: { 'Authorization': d.data.token } })\n          .get('/verify')\n      }).then(d => {\n        for (key in schemas.auth.Logged) {\n          expect(d.data).to.have.property(key)\n          if (key === 'role') expect(d.data[key]).to.equal('admin')\n        }\n        done()\n      })",
      "err": {},
      "isRoot": false,
      "uuid": "15439007-de43-4af6-9a8e-1f202d3d37b9",
      "parentUUID": "bfdd1b81-dbc9-49c1-8887-e6e0dea31a47",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "401: No header[authorization]",
      "fullTitle": "[GET] /verify Verify the token in header[authorization] 401: No header[authorization]",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.get('/verify')\n        .catch(d => {\n          expect(d.response.status).to.equal(401)\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "fe480fe4-706d-4f6f-b238-dcac2fcb0a67",
      "parentUUID": "bfdd1b81-dbc9-49c1-8887-e6e0dea31a47",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "401: Invalid header[authorization]",
      "fullTitle": "[GET] /verify Verify the token in header[authorization] 401: Invalid header[authorization]",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      customApi({ headers: { 'Authorization': 'asdf' } }).get('/verify')\n        .catch(d => {\n          expect(d.response.status).to.equal(401)\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "eb98a957-d624-4396-8901-00d4bfe0d391",
      "parentUUID": "bfdd1b81-dbc9-49c1-8887-e6e0dea31a47",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "200: by username",
      "fullTitle": "[GET] /user?_id|username|email 200: by username",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.get('/user?username=editor1')\n        .then(d => {\n          for (key in schemas.user.UserPublic) {\n            expect(d.data).to.have.property(key)\n          }\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "0f210d99-fea8-4d2e-a036-2dbf6ddc15f3",
      "parentUUID": "65ea569f-511d-4993-ad1b-c01175978abf",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "204: no matched user",
      "fullTitle": "[GET] /user?_id|username|email 204: no matched user",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.get('/user?username=editor2')\n        .then(d => {\n          expect(d.status).to.equal(204)\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "99555923-e5c7-44e1-be95-39be88160cdd",
      "parentUUID": "65ea569f-511d-4993-ad1b-c01175978abf",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "204: admin user is ignored",
      "fullTitle": "[GET] /user?_id|username|email 204: admin user is ignored",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.get('/user?username=admin')\n        .then(d => {\n          expect(d.status).to.equal(204)\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "a05c0c9f-8dde-47b9-ab9d-67894d519d44",
      "parentUUID": "65ea569f-511d-4993-ad1b-c01175978abf",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "405: missing query",
      "fullTitle": "[GET] /user?_id|username|email 405: missing query",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.get('/user')\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "d6bdc50c-d701-4d6f-bb01-4a162533c8aa",
      "parentUUID": "65ea569f-511d-4993-ad1b-c01175978abf",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "201: new User",
      "fullTitle": "[POST] /admin/user [admin only] 201: new User",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.post('/admin/user', userCreate, { headers })\n        .then(d => {\n          for (key in schemas.user.User) {\n            expect(d.data).to.have.property(key)\n          }\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "87ac9ac6-1e89-48e2-86b6-64ea3ee59e80",
      "parentUUID": "6d9c3695-a22b-473d-a595-0233a1b98f0d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "401: Unauthorized",
      "fullTitle": "[POST] /admin/user [admin only] 401: Unauthorized",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.post('/admin/user', userCreate)\n        .catch(e => {\n          expect(e.response.status).to.equal(401)\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "65f86b91-fbe2-44df-8dc6-8f07dd11364a",
      "parentUUID": "6d9c3695-a22b-473d-a595-0233a1b98f0d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "405: duplicated username",
      "fullTitle": "[POST] /admin/user [admin only] 405: duplicated username",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.post('/admin/user', userCreate, { headers })\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "f16ab178-0bd3-402e-b0c7-156b42a90b4f",
      "parentUUID": "6d9c3695-a22b-473d-a595-0233a1b98f0d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "405: empty / missing username",
      "fullTitle": "[POST] /admin/user [admin only] 405: empty / missing username",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      const _userCreate = Object.assign({}, userCreate, { username: '' })\n      // userCreate.username = undefined\n      // delete userCreate.username\n      api.post('/admin/user', _userCreate, { headers })\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "8e4a64ec-d369-426b-8e2f-75731ade70e5",
      "parentUUID": "6d9c3695-a22b-473d-a595-0233a1b98f0d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "405: empty / missing email",
      "fullTitle": "[POST] /admin/user [admin only] 405: empty / missing email",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      const _userCreate = Object.assign({}, userCreate, { email: '' })\n      // userCreate.email = undefined\n      // delete userCreate.email\n      api.post('/admin/user', _userCreate, { headers })\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "e2b8f926-86f8-47a7-8639-28d748d8f43e",
      "parentUUID": "6d9c3695-a22b-473d-a595-0233a1b98f0d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "200: User",
      "fullTitle": "[GET] /admin/user [admin only] 200: User",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      const params = { \n        criteria: JSON.stringify({ username: 'admin' }),\n        select: Object.keys(schemas.user.UserFindOne).join(' '))()\n      }\n      api.get('/admin/user', { params, headers })\n        .then(d => {\n          for (key in schemas.user.UserFindOne) {\n            schemas.user.UserFindOne.has && expect(d.data).to.have.property(key)\n          }\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "6baa2de6-58da-4b97-bde7-2da46a6ad760",
      "parentUUID": "3cb307cb-1859-4eee-8bb1-549bfb8ad23d",
      "isHook": false,
      "skipped": false
    }
  ],
  "allPending": [],
  "allPasses": [
    {
      "title": "Welcome",
      "fullTitle": " Welcome",
      "timedOut": false,
      "duration": 90,
      "state": "passed",
      "speed": "slow",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n  api.get('/').then(d => {\n    expect(d.data).to.have.property('env')\n    expect(d.data).to.have.property('info')\n    expect(d.data).to.have.property('authentication')\n    done()\n  })",
      "err": {},
      "isRoot": true,
      "uuid": "744e8327-e354-474b-abef-119c81e0ebc8",
      "parentUUID": "a0d578e8-626d-42f1-804d-0cc534cb6f4a",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "200: Logged",
      "fullTitle": "[POST] /login Login to the application 200: Logged",
      "timedOut": false,
      "duration": 33,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.post('/login', defAdmin).then(d => {\n        for (key in schemas.auth.Logged) {\n          expect(d.data).to.have.property(key)\n        }\n        done()\n      })",
      "err": {},
      "isRoot": false,
      "uuid": "49d1fc4e-b782-4d18-9649-949dc0767864",
      "parentUUID": "aad1ca44-95c3-4ed1-9bf3-faf550b36f37",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "405: only username",
      "fullTitle": "[POST] /login Login to the application 405: only username",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.post('/login', { username: 'admin' })\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "62654982-06cf-4958-9123-e71ca13d1857",
      "parentUUID": "aad1ca44-95c3-4ed1-9bf3-faf550b36f37",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "405: only password",
      "fullTitle": "[POST] /login Login to the application 405: only password",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.post('/login', { password: 'admin' })\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "d53da658-b849-4053-947a-c0d18e7a810c",
      "parentUUID": "aad1ca44-95c3-4ed1-9bf3-faf550b36f37",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "405: non-existing username",
      "fullTitle": "[POST] /login Login to the application 405: non-existing username",
      "timedOut": false,
      "duration": 6,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.post('/login', { username: 'Ofjwdz2q13rczva', password: 'asdf' })\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "0d2f5d9c-0d14-4f00-93df-9a9e7fb05d5d",
      "parentUUID": "aad1ca44-95c3-4ed1-9bf3-faf550b36f37",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "200: Logged",
      "fullTitle": "[GET] /verify Verify the token in header[authorization] 200: Logged",
      "timedOut": false,
      "duration": 16,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.post('/login', defAdmin)\n      .then(d => {\n        return customApi({ headers: { 'Authorization': d.data.token } })\n          .get('/verify')\n      }).then(d => {\n        for (key in schemas.auth.Logged) {\n          expect(d.data).to.have.property(key)\n          if (key === 'role') expect(d.data[key]).to.equal('admin')\n        }\n        done()\n      })",
      "err": {},
      "isRoot": false,
      "uuid": "15439007-de43-4af6-9a8e-1f202d3d37b9",
      "parentUUID": "bfdd1b81-dbc9-49c1-8887-e6e0dea31a47",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "401: No header[authorization]",
      "fullTitle": "[GET] /verify Verify the token in header[authorization] 401: No header[authorization]",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.get('/verify')\n        .catch(d => {\n          expect(d.response.status).to.equal(401)\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "fe480fe4-706d-4f6f-b238-dcac2fcb0a67",
      "parentUUID": "bfdd1b81-dbc9-49c1-8887-e6e0dea31a47",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "401: Invalid header[authorization]",
      "fullTitle": "[GET] /verify Verify the token in header[authorization] 401: Invalid header[authorization]",
      "timedOut": false,
      "duration": 4,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      customApi({ headers: { 'Authorization': 'asdf' } }).get('/verify')\n        .catch(d => {\n          expect(d.response.status).to.equal(401)\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "eb98a957-d624-4396-8901-00d4bfe0d391",
      "parentUUID": "bfdd1b81-dbc9-49c1-8887-e6e0dea31a47",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "200: by username",
      "fullTitle": "[GET] /user?_id|username|email 200: by username",
      "timedOut": false,
      "duration": 13,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.get('/user?username=editor1')\n        .then(d => {\n          for (key in schemas.user.UserPublic) {\n            expect(d.data).to.have.property(key)\n          }\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "0f210d99-fea8-4d2e-a036-2dbf6ddc15f3",
      "parentUUID": "65ea569f-511d-4993-ad1b-c01175978abf",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "204: no matched user",
      "fullTitle": "[GET] /user?_id|username|email 204: no matched user",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.get('/user?username=editor2')\n        .then(d => {\n          expect(d.status).to.equal(204)\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "99555923-e5c7-44e1-be95-39be88160cdd",
      "parentUUID": "65ea569f-511d-4993-ad1b-c01175978abf",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "204: admin user is ignored",
      "fullTitle": "[GET] /user?_id|username|email 204: admin user is ignored",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.get('/user?username=admin')\n        .then(d => {\n          expect(d.status).to.equal(204)\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "a05c0c9f-8dde-47b9-ab9d-67894d519d44",
      "parentUUID": "65ea569f-511d-4993-ad1b-c01175978abf",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "405: missing query",
      "fullTitle": "[GET] /user?_id|username|email 405: missing query",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.get('/user')\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "d6bdc50c-d701-4d6f-bb01-4a162533c8aa",
      "parentUUID": "65ea569f-511d-4993-ad1b-c01175978abf",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "201: new User",
      "fullTitle": "[POST] /admin/user [admin only] 201: new User",
      "timedOut": false,
      "duration": 24,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.post('/admin/user', userCreate, { headers })\n        .then(d => {\n          for (key in schemas.user.User) {\n            expect(d.data).to.have.property(key)\n          }\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "87ac9ac6-1e89-48e2-86b6-64ea3ee59e80",
      "parentUUID": "6d9c3695-a22b-473d-a595-0233a1b98f0d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "401: Unauthorized",
      "fullTitle": "[POST] /admin/user [admin only] 401: Unauthorized",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.post('/admin/user', userCreate)\n        .catch(e => {\n          expect(e.response.status).to.equal(401)\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "65f86b91-fbe2-44df-8dc6-8f07dd11364a",
      "parentUUID": "6d9c3695-a22b-473d-a595-0233a1b98f0d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "405: duplicated username",
      "fullTitle": "[POST] /admin/user [admin only] 405: duplicated username",
      "timedOut": false,
      "duration": 10,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      api.post('/admin/user', userCreate, { headers })\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "f16ab178-0bd3-402e-b0c7-156b42a90b4f",
      "parentUUID": "6d9c3695-a22b-473d-a595-0233a1b98f0d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "405: empty / missing username",
      "fullTitle": "[POST] /admin/user [admin only] 405: empty / missing username",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      const _userCreate = Object.assign({}, userCreate, { username: '' })\n      // userCreate.username = undefined\n      // delete userCreate.username\n      api.post('/admin/user', _userCreate, { headers })\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "8e4a64ec-d369-426b-8e2f-75731ade70e5",
      "parentUUID": "6d9c3695-a22b-473d-a595-0233a1b98f0d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "405: empty / missing email",
      "fullTitle": "[POST] /admin/user [admin only] 405: empty / missing email",
      "timedOut": false,
      "duration": 5,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      const _userCreate = Object.assign({}, userCreate, { email: '' })\n      // userCreate.email = undefined\n      // delete userCreate.email\n      api.post('/admin/user', _userCreate, { headers })\n        .catch(e => {\n          expect(e.response.status).to.equal(405)\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "e2b8f926-86f8-47a7-8639-28d748d8f43e",
      "parentUUID": "6d9c3695-a22b-473d-a595-0233a1b98f0d",
      "isHook": false,
      "skipped": false
    },
    {
      "title": "200: User",
      "fullTitle": "[GET] /admin/user [admin only] 200: User",
      "timedOut": false,
      "duration": 14,
      "state": "passed",
      "speed": "fast",
      "pass": true,
      "fail": false,
      "pending": false,
      "code": "done => {\n      const params = { \n        criteria: JSON.stringify({ username: 'admin' }),\n        select: Object.keys(schemas.user.UserFindOne).join(' '))()\n      }\n      api.get('/admin/user', { params, headers })\n        .then(d => {\n          for (key in schemas.user.UserFindOne) {\n            schemas.user.UserFindOne.has && expect(d.data).to.have.property(key)\n          }\n          done()\n        })",
      "err": {},
      "isRoot": false,
      "uuid": "6baa2de6-58da-4b97-bde7-2da46a6ad760",
      "parentUUID": "3cb307cb-1859-4eee-8bb1-549bfb8ad23d",
      "isHook": false,
      "skipped": false
    }
  ],
  "allFailures": [],
  "copyrightYear": 2017
}